U,LGR_UGGA
I,CH4 (ppm),0,input,numeric
// Serial (RS232) driver for Los Gatos Research CH4/CO2/H2O (UGGA) analyzer
// Patrick O'Keeffe <pokeeffe@wsu.edu>
// Version 1.0
//
// The MIT License
// Copyright (c) 2020 WSU Laboratory for Atmospheric Research
// https://mit-license.org/

ENDIO

I,CH4 (dry ppm),1,input,numeric

ENDIO

I,CO2 (ppm),2,input,numeric

ENDIO

I,CO2 (dry ppm),3,input,numeric

ENDIO

I,H2O (ppm),4,input,numeric

ENDIO
I,Cell Pressure (Torr),5,input,numeric

ENDIO

I,Cell Temperature (Celsius),6,input,numeric

ENDIO

I,Ambient Temperature (Celsius),7,input,numeric

ENDIO

I,Ringdown 0 (usec),8,input,numeric

ENDIO

I,Ringdown 1 (usec),9,input,numeric

ENDIO

I,Fit Flag,20,input,numeric

ENDIO

I,MIU Valve,21,input,numeric

ENDIO

I,MIU Description,22,input,string

ENDIO

I,Status,23,input,string

ENDIO


I,SD of CH4 (ppm),10,input,numeric

ENDIO

I,SD of CH4 (dry ppm),11,input,numeric

ENDIO

I,SD of CO2 (ppm),12,input,numeric

ENDIO

I,SD of CO2 (dry ppm),13,input,numeric

ENDIO

I,SD of H2O (ppm),14,input,numeric

ENDIO

I,SD of Cell Pressure (Torr),15,input,numeric

ENDIO

I,SD of Cell Temperature (Celsius),16,input,numeric

ENDIO

I,SD of Ambient Temperature (Celsius),17,input,numeric

ENDIO

I,SD of Ringdown 0 (usec),18,input,numeric

ENDIO

I,SD of Ringdown 1 (usec),19,input,numeric

ENDIO


F,Poll,0
function Poll(string out, until)
// this function will poll the port with given string and read
// the response until the given character.  Returns NULL (empty)
// if there is an error

if (argc < 2)
   throw("Invalid number of parameters")
endif
private string in
try
   // lock the port
   if (!LockPort())
      throw("Unable to lock port")
   endif
   // clear anything pending
   Purge()
   // output our string
   Write(out)
   // and read until the eol:
   in = ReadUntil(until) 
   // release the port
   UnlockPort()
   // and return the response
   return(in)
catch()
   // error occured
   UnlockPort()
   throw()
endcatch
// return NULL to indicate error.  This should never happen
// because of the throw() statement above
return(NULL)

ENDIO


E,OnLoad

private string msg
private string vals
private fit_flag

Channel.AddValue(strDevice,0,"Status",0,"Loaded on port "+PortName+" (COM "+Port+")")
Purge()

while (1)
   try
      msg = ReadUntil(10) // EOL = <CR><LF>
      vals = Parse(HideHidden(msg),-1,",")
   
      fit_flag = StrToDouble(vals[21])
      if (fit_flag == 3)
         Channel.AddValue(strDevice,0,"CH4 (ppm)",0,InsertTime(StrToDouble(vals[1]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of CH4 (ppm)",0,InsertTime(StrToDouble(vals[2]),msg.Time,0))
         Channel.AddValue(strDevice,0,"H2O (ppm)",0,InsertTime(StrToDouble(vals[3]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of H2O (ppm)",0,InsertTime(StrToDouble(vals[4]),msg.Time,0))
         Channel.AddValue(strDevice,0,"CO2 (ppm)",0,InsertTime(StrToDouble(vals[5]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of CO2 (ppm)",0,InsertTime(StrToDouble(vals[6]),msg.Time,0))
         Channel.AddValue(strDevice,0,"CH4 (dry ppm)",0,InsertTime(StrToDouble(vals[7]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of CH4 (dry ppm)",0,InsertTime(StrToDouble(vals[8]),msg.Time,0))
         Channel.AddValue(strDevice,0,"CO2 (dry ppm)",0,InsertTime(StrToDouble(vals[9]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of CO2 (dry ppm)",0,InsertTime(StrToDouble(vals[10]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Cell Pressure (Torr)",0,InsertTime(StrToDouble(vals[11]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of Cell Pressure (Torr)",0,InsertTime(StrToDouble(vals[12]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Cell Temperature (Celsius)",0,InsertTime(StrToDouble(vals[13]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of Cell Temperature (Celsius)",0,InsertTime(StrToDouble(vals[14]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Ambient Temperature (Celsius)",0,InsertTime(StrToDouble(vals[15]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of Ambient Temperature (Celsius)",0,InsertTime(StrToDouble(vals[16]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Ringdown 0 (usec)",0,InsertTime(StrToDouble(vals[17]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of Ringdown 0 (usec)",0,InsertTime(StrToDouble(vals[18]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Ringdown 1 (usec)",0,InsertTime(StrToDouble(vals[19]),msg.Time,0))
         Channel.AddValue(strDevice,0,"SD of Ringdown 1 (usec)",0,InsertTime(StrToDouble(vals[20]),msg.Time,0))
         Channel.AddValue(strDevice,0,"Fit Flag",0,InsertTime(fit_flag,msg.Time,0))
         Channel.AddValue(strDevice,0,"MIU Valve",0,InsertTime(StrToDouble(vals[22]),msg.Time,0))
         Channel.AddValue(strDevice,0,"MIU Description",0,InsertTime(vals[23],msg.Time,0))
      Else
         Channel.AddValue(strDevice,0,"Status",0,"Discarding invalid serial data message")
      EndIf
   catch("C1136")
      // silently ignore timeouts
   endcatch
   catch()
      // all other errors ignore but report
      Channel.AddValue(strDevice,0,"Status",0,"Ignoring "+strLastError)
   endcatch

   delay(0.1)
endwhile

ENDIO

E,OnUnload
Channel.AddValue(strDevice,0,"Status",0,"Unloaded device")

ENDIO

E,OnReceive


ENDIO

E,OnSend


ENDIO

